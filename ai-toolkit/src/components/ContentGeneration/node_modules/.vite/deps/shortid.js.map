{
  "version": 3,
  "sources": ["../../shortid/lib/random/random-from-seed.js", "../../shortid/lib/alphabet.js", "../../shortid/lib/random/random-byte-browser.js", "../../shortid/node_modules/nanoid/format.browser.js", "../../shortid/lib/generate.js", "../../shortid/lib/build.js", "../../shortid/lib/is-valid.js", "../../shortid/lib/util/cluster-worker-id-browser.js", "../../shortid/lib/index.js", "../../shortid/index.js"],
  "sourcesContent": ["'use strict';\r\n\r\n// Found this seed-based random generator somewhere\r\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\r\n\r\nvar seed = 1;\r\n\r\n/**\r\n * return a random number based on a seed\r\n * @param seed\r\n * @returns {number}\r\n */\r\nfunction getNextValue() {\r\n    seed = (seed * 9301 + 49297) % 233280;\r\n    return seed/(233280.0);\r\n}\r\n\r\nfunction setSeed(_seed_) {\r\n    seed = _seed_;\r\n}\r\n\r\nmodule.exports = {\r\n    nextValue: getNextValue,\r\n    seed: setSeed\r\n};\r\n", "'use strict';\r\n\r\nvar randomFromSeed = require('./random/random-from-seed');\r\n\r\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\r\nvar alphabet;\r\nvar previousSeed;\r\n\r\nvar shuffled;\r\n\r\nfunction reset() {\r\n    shuffled = false;\r\n}\r\n\r\nfunction setCharacters(_alphabet_) {\r\n    if (!_alphabet_) {\r\n        if (alphabet !== ORIGINAL) {\r\n            alphabet = ORIGINAL;\r\n            reset();\r\n        }\r\n        return;\r\n    }\r\n\r\n    if (_alphabet_ === alphabet) {\r\n        return;\r\n    }\r\n\r\n    if (_alphabet_.length !== ORIGINAL.length) {\r\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\r\n    }\r\n\r\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\r\n       return ind !== arr.lastIndexOf(item);\r\n    });\r\n\r\n    if (unique.length) {\r\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\r\n    }\r\n\r\n    alphabet = _alphabet_;\r\n    reset();\r\n}\r\n\r\nfunction characters(_alphabet_) {\r\n    setCharacters(_alphabet_);\r\n    return alphabet;\r\n}\r\n\r\nfunction setSeed(seed) {\r\n    randomFromSeed.seed(seed);\r\n    if (previousSeed !== seed) {\r\n        reset();\r\n        previousSeed = seed;\r\n    }\r\n}\r\n\r\nfunction shuffle() {\r\n    if (!alphabet) {\r\n        setCharacters(ORIGINAL);\r\n    }\r\n\r\n    var sourceArray = alphabet.split('');\r\n    var targetArray = [];\r\n    var r = randomFromSeed.nextValue();\r\n    var characterIndex;\r\n\r\n    while (sourceArray.length > 0) {\r\n        r = randomFromSeed.nextValue();\r\n        characterIndex = Math.floor(r * sourceArray.length);\r\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\r\n    }\r\n    return targetArray.join('');\r\n}\r\n\r\nfunction getShuffled() {\r\n    if (shuffled) {\r\n        return shuffled;\r\n    }\r\n    shuffled = shuffle();\r\n    return shuffled;\r\n}\r\n\r\n/**\r\n * lookup shuffled letter\r\n * @param index\r\n * @returns {string}\r\n */\r\nfunction lookup(index) {\r\n    var alphabetShuffled = getShuffled();\r\n    return alphabetShuffled[index];\r\n}\r\n\r\nfunction get () {\r\n  return alphabet || ORIGINAL;\r\n}\r\n\r\nmodule.exports = {\r\n    get: get,\r\n    characters: characters,\r\n    seed: setSeed,\r\n    lookup: lookup,\r\n    shuffled: getShuffled\r\n};\r\n", "'use strict';\r\n\r\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\r\n\r\nvar randomByte;\r\n\r\nif (!crypto || !crypto.getRandomValues) {\r\n    randomByte = function(size) {\r\n        var bytes = [];\r\n        for (var i = 0; i < size; i++) {\r\n            bytes.push(Math.floor(Math.random() * 256));\r\n        }\r\n        return bytes;\r\n    };\r\n} else {\r\n    randomByte = function(size) {\r\n        return crypto.getRandomValues(new Uint8Array(size));\r\n    };\r\n}\r\n\r\nmodule.exports = randomByte;\r\n", "// This file replaces `format.js` in bundlers like webpack or Rollup,\r\n// according to `browser` config in `package.json`.\r\n\r\nmodule.exports = function (random, alphabet, size) {\r\n  // We canâ€™t use bytes bigger than the alphabet. To make bytes values closer\r\n  // to the alphabet, we apply bitmask on them. We look for the closest\r\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\r\n  // 30 symbols in the alphabet, we will take 31 (00011111).\r\n  // We do not use faster Math.clz32, because it is not available in browsers.\r\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\r\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\r\n  // which is bigger than the alphabet). As a result, we will need more bytes,\r\n  // than ID size, because we will refuse bytes bigger than the alphabet.\r\n\r\n  // Every hardware random generator call is costly,\r\n  // because we need to wait for entropy collection. This is why often it will\r\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\r\n\r\n  // Here we calculate how many random bytes should we call in advance.\r\n  // It depends on ID length, mask / alphabet size and magic number 1.6\r\n  // (which was selected according benchmarks).\r\n\r\n  // -~f => Math.ceil(f) if n is float number\r\n  // -~i => i + 1 if n is integer number\r\n  var step = -~(1.6 * mask * size / alphabet.length)\r\n  var id = ''\r\n\r\n  while (true) {\r\n    var bytes = random(step)\r\n    // Compact alternative for `for (var i = 0; i < step; i++)`\r\n    var i = step\r\n    while (i--) {\r\n      // If random byte is bigger than alphabet even after bitmask,\r\n      // we refuse it by `|| ''`.\r\n      id += alphabet[bytes[i] & mask] || ''\r\n      // More compact than `id.length + 1 === size`\r\n      if (id.length === +size) return id\r\n    }\r\n  }\r\n}\r\n", "'use strict';\r\n\r\nvar alphabet = require('./alphabet');\r\nvar random = require('./random/random-byte');\r\nvar format = require('nanoid/format');\r\n\r\nfunction generate(number) {\r\n    var loopCounter = 0;\r\n    var done;\r\n\r\n    var str = '';\r\n\r\n    while (!done) {\r\n        str = str + format(random, alphabet.get(), 1);\r\n        done = number < (Math.pow(16, loopCounter + 1 ) );\r\n        loopCounter++;\r\n    }\r\n    return str;\r\n}\r\n\r\nmodule.exports = generate;\r\n", "'use strict';\r\n\r\nvar generate = require('./generate');\r\nvar alphabet = require('./alphabet');\r\n\r\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\r\n// This number should be updated every year or so to keep the generated id short.\r\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\r\nvar REDUCE_TIME = 1567752802062;\r\n\r\n// don't change unless we change the algos or REDUCE_TIME\r\n// must be an integer and less than 16\r\nvar version = 7;\r\n\r\n// Counter is used when shortid is called multiple times in one second.\r\nvar counter;\r\n\r\n// Remember the last time shortid was called in case counter is needed.\r\nvar previousSeconds;\r\n\r\n/**\r\n * Generate unique id\r\n * Returns string id\r\n */\r\nfunction build(clusterWorkerId) {\r\n    var str = '';\r\n\r\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\r\n\r\n    if (seconds === previousSeconds) {\r\n        counter++;\r\n    } else {\r\n        counter = 0;\r\n        previousSeconds = seconds;\r\n    }\r\n\r\n    str = str + generate(version);\r\n    str = str + generate(clusterWorkerId);\r\n    if (counter > 0) {\r\n        str = str + generate(counter);\r\n    }\r\n    str = str + generate(seconds);\r\n    return str;\r\n}\r\n\r\nmodule.exports = build;\r\n", "'use strict';\r\nvar alphabet = require('./alphabet');\r\n\r\nfunction isShortId(id) {\r\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\r\n        return false;\r\n    }\r\n\r\n    var nonAlphabetic = new RegExp('[^' +\r\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\r\n    ']');\r\n    return !nonAlphabetic.test(id);\r\n}\r\n\r\nmodule.exports = isShortId;\r\n", "'use strict';\r\n\r\nmodule.exports = 0;\r\n", "'use strict';\r\n\r\nvar alphabet = require('./alphabet');\r\nvar build = require('./build');\r\nvar isValid = require('./is-valid');\r\n\r\n// if you are using cluster or multiple servers use this to make each instance\r\n// has a unique value for worker\r\n// Note: I don't know if this is automatically set when using third\r\n// party cluster solutions such as pm2.\r\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\r\n\r\n/**\r\n * Set the seed.\r\n * Highly recommended if you don't want people to try to figure out your id schema.\r\n * exposed as shortid.seed(int)\r\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\r\n */\r\nfunction seed(seedValue) {\r\n    alphabet.seed(seedValue);\r\n    return module.exports;\r\n}\r\n\r\n/**\r\n * Set the cluster worker or machine id\r\n * exposed as shortid.worker(int)\r\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\r\n * returns shortid module so it can be chained.\r\n */\r\nfunction worker(workerId) {\r\n    clusterWorkerId = workerId;\r\n    return module.exports;\r\n}\r\n\r\n/**\r\n *\r\n * sets new characters to use in the alphabet\r\n * returns the shuffled alphabet\r\n */\r\nfunction characters(newCharacters) {\r\n    if (newCharacters !== undefined) {\r\n        alphabet.characters(newCharacters);\r\n    }\r\n\r\n    return alphabet.shuffled();\r\n}\r\n\r\n/**\r\n * Generate unique id\r\n * Returns string id\r\n */\r\nfunction generate() {\r\n  return build(clusterWorkerId);\r\n}\r\n\r\n// Export all other functions as properties of the generate function\r\nmodule.exports = generate;\r\nmodule.exports.generate = generate;\r\nmodule.exports.seed = seed;\r\nmodule.exports.worker = worker;\r\nmodule.exports.characters = characters;\r\nmodule.exports.isValid = isValid;\r\n", "'use strict';\r\nmodule.exports = require('./lib/index');\r\n"],
  "mappings": "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",
  "names": []
}
